/* Auto-generated by genmsg_cpp for file /home/nb950/Desktop/robosketch/robosketch/srv/ConvertXYSrv.srv */
#ifndef ROBOSKETCH_SERVICE_CONVERTXYSRV_H
#define ROBOSKETCH_SERVICE_CONVERTXYSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robosketch
{
template <class ContainerAllocator>
struct ConvertXYSrvRequest_ {
  typedef ConvertXYSrvRequest_<ContainerAllocator> Type;

  ConvertXYSrvRequest_()
  {
  }

  ConvertXYSrvRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct ConvertXYSrvRequest
typedef  ::robosketch::ConvertXYSrvRequest_<std::allocator<void> > ConvertXYSrvRequest;

typedef boost::shared_ptr< ::robosketch::ConvertXYSrvRequest> ConvertXYSrvRequestPtr;
typedef boost::shared_ptr< ::robosketch::ConvertXYSrvRequest const> ConvertXYSrvRequestConstPtr;



template <class ContainerAllocator>
struct ConvertXYSrvResponse_ {
  typedef ConvertXYSrvResponse_<ContainerAllocator> Type;

  ConvertXYSrvResponse_()
  {
  }

  ConvertXYSrvResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct ConvertXYSrvResponse
typedef  ::robosketch::ConvertXYSrvResponse_<std::allocator<void> > ConvertXYSrvResponse;

typedef boost::shared_ptr< ::robosketch::ConvertXYSrvResponse> ConvertXYSrvResponsePtr;
typedef boost::shared_ptr< ::robosketch::ConvertXYSrvResponse const> ConvertXYSrvResponseConstPtr;


struct ConvertXYSrv
{

typedef ConvertXYSrvRequest Request;
typedef ConvertXYSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ConvertXYSrv
} // namespace robosketch

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robosketch/ConvertXYSrvRequest";
  }

  static const char* value(const  ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robosketch/ConvertXYSrvResponse";
  }

  static const char* value(const  ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robosketch::ConvertXYSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ConvertXYSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robosketch::ConvertXYSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ConvertXYSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robosketch::ConvertXYSrv> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const robosketch::ConvertXYSrv&) { return value(); } 
};

template<>
struct DataType<robosketch::ConvertXYSrv> {
  static const char* value() 
  {
    return "robosketch/ConvertXYSrv";
  }

  static const char* value(const robosketch::ConvertXYSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robosketch::ConvertXYSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const robosketch::ConvertXYSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robosketch::ConvertXYSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robosketch/ConvertXYSrv";
  }

  static const char* value(const robosketch::ConvertXYSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robosketch::ConvertXYSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const robosketch::ConvertXYSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robosketch::ConvertXYSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robosketch/ConvertXYSrv";
  }

  static const char* value(const robosketch::ConvertXYSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOSKETCH_SERVICE_CONVERTXYSRV_H

